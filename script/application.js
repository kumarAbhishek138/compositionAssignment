// Generated by CoffeeScript 2.3.1
(function() {
  var ComponentDetails, crossBtn, drawLines, drawPoints, enableComponent, enablePivotPoint, fillPivotDetails, imageArray, imageJSON, imageName, jsonPath, loadJSON, random;

  imageArray = [
    {
      "src": "./Images/sph4.svg",
      "id": "0"
    },
    {
      "src": "./Images/bsph4.svg",
      "id": "1"
    },
    {
      "src": "./Images/oct3.svg",
      "id": "2"
    },
    {
      "src": "./Images/sphi4.svg",
      "id": "3"
    },
    {
      "src": "./Images/rib.svg",
      "id": "4"
    },
    {
      "src": "./Images/carfilm.svg",
      "id": "5"
    },
    {
      "src": "./Images/em4.svg",
      "id": "6"
    }
  ];

  random = Math.round(Math.random() * 6);

  imageName = imageArray[random].src; //change 0 to 'random' for random images.

  jsonPath = (imageName.substring(9)).replace("svg", "JSON");

  imageJSON = (imageName.substring(9)).replace("svg", "JSON");

  crossBtn = $(".CloseBtn");

  $(".Composition_image").attr("src", imageName);

  loadJSON = function() {
    var xobj;
    xobj = new XMLHttpRequest();
    xobj.overrideMimeType("application/json");
    xobj.open('GET', '/compositionAssignment/JSON/' + imageJSON, true);
    xobj.onreadystatechange = function() {
      var CompositionData;
      if (xobj.readyState === 4 && xobj.status === 200) {
        CompositionData = xobj.responseText;
        drawPoints(CompositionData);
        return drawLines(CompositionData);
      }
    };
    return xobj.send(null);
  };

  drawPoints = function(JSONfile) {
    var components, data, j, len, link, pivotPointNo, results, xPoint, yPoint;
    data = JSON.parse(JSONfile);
    results = [];
    for (j = 0, len = data.length; j < len; j++) {
      components = data[j];
      xPoint = components.x;
      yPoint = components.y;
      link = document.createElement('a');
      link.className = "Composition_pivot";
      link.setAttribute("style", "top:" + yPoint + "px;left:" + xPoint + "px;");
      pivotPointNo = document.createAttribute("pivotPointNo");
      pivotPointNo.value = components.pivotOrderNum;
      link.setAttributeNode(pivotPointNo);
      results.push(document.getElementById("composition").appendChild(link));
    }
    return results;
  };

  drawLines = function(JSONfile) {
    var canvas, ctx, data, j, len, points, xPoint, yPoint;
    canvas = document.getElementById("canvas");
    //console.log($(document).width())
    if ($(document).width() > 400) {
      canvas.width = 500;
      canvas.height = 300;
    } else {
      canvas.width = 300;
      canvas.height = 300;
    }
    ctx = canvas.getContext("2d");
    data = JSON.parse(JSONfile);
    ctx.beginPath();
    for (j = 0, len = data.length; j < len; j++) {
      points = data[j];
      xPoint = points.x + 5;
      yPoint = points.y + 5;
      ctx.moveTo(xPoint, yPoint);
      if (data.length > 1) {
        ctx.lineTo(250, (points.id + 1) * 40);
      }
      ctx.lineTo(300, (points.id + 1) * 40);
      fillPivotDetails(points.id + 1, points.displayName);
      ComponentDetails(points.id + 1, points.displayName, [points.itemType, points.formula, points.role]);
    }
    return ctx.stroke();
  };

  fillPivotDetails = function(pivotPointNo, pivotPointTitle) {
    var desktopCircle, desktopTitle, listItem, listItemLink, mobileCircle;
    //create li
    listItem = document.createElement("li");
    listItem.className = "PivotList_item";
    //create anchor
    listItemLink = document.createElement("a");
    listItemLink.className = "PivotList_link";
    //add anchor to newly created list
    listItem.appendChild(listItemLink);
    //create span for mobile , desktop and title
    mobileCircle = document.createElement("span");
    mobileCircle.className = "PivotCount_MobileCount";
    mobileCircle.innerText = pivotPointNo;
    desktopTitle = document.createElement("span");
    desktopTitle.className = "PivotCount_Title";
    //desktopTitle.innerText  = pivotPointTitle
    desktopCircle = document.createElement("span");
    desktopCircle.className = "PivotCount_DesktopCircle";
    //add all span to anchor
    listItemLink.appendChild(mobileCircle);
    listItemLink.appendChild(desktopTitle);
    listItemLink.appendChild(desktopCircle);
    //add all elements to 'ul'
    return document.getElementById("PivotPointList").appendChild(listItem);
  };

  //ComponentDetails(pivotPointNo , pivotPointTitle)
  ComponentDetails = function(id, name, properties) {
    var componentBodyWrapper, componentDetails, componentHeader, componentProperty, greyCircle, headerValue, i, j, propName, propertyName, propertyValue;
    //create top div class="components_details Component--disable"
    componentDetails = document.createElement("div");
    // componentDetails.className = "components_details components_details--disable"
    componentDetails.className = "components_details";
    //create circle class="greyCircle"
    greyCircle = document.createElement("span");
    greyCircle.className = "greyCircle";
    greyCircle.innerText = id;
    //create div class="Component_header"
    componentHeader = document.createElement("div");
    componentHeader.className = "Component_header";
    //add close button
    //create h3 -- attach it to	class="Component_header"
    headerValue = "<h3><span>" + name + "</span></h3> <a class='CloseBtn'>";
    componentHeader.innerHTML = headerValue;
    componentDetails.appendChild(componentHeader);
    componentDetails.appendChild(greyCircle);
    //create div class="Component_bodyWrapper"
    componentBodyWrapper = document.createElement("div");
    componentBodyWrapper.className = "Component_bodyWrapper";
    propName = ["Type", "Formula", "Role"];
    for (i = j = 0; j <= 2; i = ++j) {
      if (properties[i] === null) {
        properties[i] = "-";
      }
      //create block for every property
      componentProperty = document.createElement("div");
      componentProperty.className = "Component_property Property";
      //Add property Names and values
      propertyName = document.createElement("strong");
      propertyName.className = "Property_name";
      propertyName.innerText = propName[i];
      componentProperty.appendChild(propertyName);
      propertyValue = document.createElement("span");
      propertyValue.className = "Property_value";
      propertyValue.innerHTML = properties[i];
      componentProperty.appendChild(propertyValue);
      componentBodyWrapper.appendChild(componentProperty);
    }
    componentDetails.appendChild(componentBodyWrapper);
    return document.getElementById("components").appendChild(componentDetails);
  };

  $('.Components').on('click', ".CloseBtn", function(e) {
    $(e.target).parents(".components_details").removeClass("active");
    $(e.target).parents(".components_details").children(".greyCircle").removeClass("active");
    return enablePivotPoint(parseInt($(e.target).parents(".components_details").children(".greyCircle").text()));
  });

  $('.Components').on('click', ".Component_header h3", ".greyCircle", function(el) {
    var componentNodes, element, j, len, pivotPointNo;
    componentNodes = document.getElementsByClassName("components_details");
    element = $(el.target);
    pivotPointNo = element.parents(".components_details").children(".greyCircle");
    element.parents(".components_details").toggleClass("active");
    $(pivotPointNo).toggleClass("active");
    for (j = 0, len = componentNodes.length; j < len; j++) {
      element = componentNodes[j];
      if ($(element).hasClass("active") && $(element).children("span.greyCircle").text() !== $(pivotPointNo).text()) {
        $(element).children("span.greyCircle").removeClass("active");
        $(element).removeClass("active");
      }
    }
    return enablePivotPoint(parseInt(pivotPointNo.text()));
  });

  $('.Composition_pivotPointList').on('click', ".PivotList_link", function(el) {
    enablePivotPoint(parseInt($(el.target).text()));
    return enableComponent(parseInt($(el.target).text()));
  });

  enableComponent = function(pivotpointNumber) {
    var j, len, pivotPoint, pivotPointList, results;
    pivotPointList = document.getElementsByClassName("greyCircle");
    results = [];
    for (j = 0, len = pivotPointList.length; j < len; j++) {
      pivotPoint = pivotPointList[j];
      if (parseInt($(pivotPoint).text()) === pivotpointNumber) {
        $(pivotPoint).toggleClass("active");
        results.push($(pivotPoint).parents(".components_details").toggleClass("active"));
      } else {
        $(pivotPoint).parents(".components_details").removeClass("active");
        results.push($(pivotPoint).removeClass("active"));
      }
    }
    return results;
  };

  enablePivotPoint = function(pivotpointNumber) {
    var j, len, pivotList, pivotPoint, ref, results;
    pivotList = $(".PivotList_item");
    ref = pivotList.children(".PivotList_link");
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      pivotPoint = ref[j];
      if (parseInt(pivotPoint.text) === pivotpointNumber) {
        results.push($(pivotPoint).toggleClass("active"));
      } else {
        results.push($(pivotPoint).removeClass("active"));
      }
    }
    return results;
  };

  $(document).ready(function() {
    return loadJSON();
  });

}).call(this);
